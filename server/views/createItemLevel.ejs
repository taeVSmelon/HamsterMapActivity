<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Create Item Level</title>

    <link href="../bs-5/css/bootstrap.min.css" rel="stylesheet">

    <style>
        img#itemIcon {
            max-width: 300px;
        }

        ::placeholder {
            font-weight: 300 !important;
            color: #bbb !important;
            font-style: italic !important;
            opacity: 0.4 !important;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="mb-4">Create Item Level</h1>

        <form id="item-form">
            <div class="mb-3">
                <label for="choiceSelect" class="form-label">Choose one</label>
                <select class="form-select" id="itemSelector">
                    <option value="CoreItem">Core Item</option>
                    <option value="VoidItem" selected>Void Item</option>
                </select>
            </div>

            <div class="alert alert-secondary">
                <label for="setIconInput" class="form-label">Item Icon</label>
                <input class="form-control" type="file" id="setIconInput" accept="image/*" required>
                <br>
                <img id="itemIcon" src="#" alt="Preview" class="img-thumbnail" style="display: none;">
                <br>
                <br>
                <div class="row">
                    <div class="col-6">
                        <label for="itemName">Item Name</label>
                        <input type="text" id="itemName" name="itemName" class="form-control" placeholder="เกลือ"
                            required />
                    </div>
                    <div class="col-6">
                        <label for="itemRank">Item Rank</label>
                        <select id="itemRank" name="itemRank" class="form-select" required>
                            <% for (let i=0; i < itemRanks.length; i++) { const itemRank=itemRanks[i]; if (i===0) { %>
                                <option value="<%= itemRank %>" selected>
                                    <%= itemRank %>
                                </option>
                                <% } else { %>
                                    <option value="<%= itemRank %>">
                                        <%= itemRank %>
                                    </option>
                                    <% } } %>
                        </select>
                    </div>
                </div>
                <br>
                <label for="itemDescription">Item Description</label>
                <textarea id="itemDescription" name="itemDescription" class="form-control" placeholder="เค็ม" rows="3"
                    required></textarea>
                <br>
                <label for="canStack">Can Stack</label>
                <input type="checkbox" id="canStack" class="form-check-input" checked />
                <br>
                <br>
                <div class="row">
                    <div class="col col-6">
                        <label for="canBuy">Can Buy <strong class="text-danger">*work only level 0*</strong></label>
                        <input type="checkbox" id="canBuy" class="form-check-input" checked />
                        <br>
                        <label for="buyPrice">Buy Price <strong class="text-danger">*work only level 0*</strong></label>
                        <input type="number" id="buyPrice" name="buyPrice" class="form-control" placeholder="123"
                            value="0" required />
                    </div>
                    <div class="col col-6">
                        <label for="canSell">Can Sell <strong class="text-danger">*work only level 0*</strong></label>
                        <input type="checkbox" id="canSell" class="form-check-input" checked />
                        <br>
                        <label for="sellPrice">Sell Price <strong class="text-danger">*work only level
                                0*</strong></label>
                        <input type="number" id="sellPrice" name="sellPrice" class="form-control" placeholder="123"
                            value="0" required />
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col col-6">
                        <label for="startLevel">Start Level</label>
                        <input type="number" id="startLevel" name="startLevel" class="form-control" placeholder="0"
                            max="10" value="0" required />
                    </div>
                    <div class="col col-6">
                        <label for="endLevel">End Level</label>
                        <input type="number" id="endLevel" name="endLevel" class="form-control" placeholder="10" min="0"
                            value="10" required />
                    </div>
                </div>

                <div id="CoreItem" class="mt-3 d-none item">
                    <hr>
                    <label for="health">Health</label>
                    <input type="number" id="health" name="health" class="form-control" placeholder="100" step="0.01" />
                    <br>
                    <label for="armor">Armor</label>
                    <input type="number" id="armor" name="armor" class="form-control" placeholder="10" step="0.01" />
                    <hr>
                    <label for="healthAdd">Health Add For Each</label>
                    <input type="number" id="healthAdd" name="healthAdd" class="form-control" placeholder="100"
                        step="0.01" />
                    <br>
                    <label for="armorAdd">Armor Add For Each</label>
                    <input type="number" id="armorAdd" name="armorAdd" class="form-control" placeholder="10"
                        step="0.01" />
                </div>

                <div id="VoidItem" class="mt-3 d-none item">
                    <hr>
                    <label for="voidPrefabName">Void Prefab Name</label>
                    <input type="text" id="voidPrefabName" name="voidPrefabName" class="form-control"
                        placeholder="เกลือ" />
                    <br>
                    <div class="row">
                        <div class="col col-6">
                            <label for="minDamage">Min Damage</label>
                            <input type="number" id="minDamage" name="minDamage" class="form-control" placeholder="5"
                                step="0.01" />
                        </div>
                        <div class="col col-6">
                            <label for="maxDamage">Max Damage</label>
                            <input type="number" id="maxDamage" name="maxDamage" class="form-control" placeholder="20"
                                step="0.01" />
                        </div>
                    </div>
                    <br>
                    <div class="row">
                        <div class="col col-6">
                            <label for="minSpeed">Min Speed</label>
                            <input type="number" id="minSpeed" name="minSpeed" class="form-control" placeholder="0.5"
                                step="0.01" />
                        </div>
                        <div class="col col-6">
                            <label for="maxSpeed">Max Speed</label>
                            <input type="number" id="maxSpeed" name="maxSpeed" class="form-control" placeholder="1.5"
                                step="0.01" />
                        </div>
                    </div>
                    <br>
                    <label for="chargeTime">Charge Time</label>
                    <input type="number" id="chargeTime" name="chargeTime" class="form-control" placeholder="1.2"
                        step="0.01" />
                    <br>
                    <label for="forcePower">Force Power</label>
                    <input type="number" id="forcePower" name="forcePower" class="form-control" placeholder="1"
                        step="0.01" />
                    <br>
                    <label for="lifeTime">Life Time</label>
                    <input type="number" id="lifeTime" name="lifeTime" class="form-control" placeholder="3"
                        step="0.01" />
                    <br>
                    <hr>
                    <h5>Skills</h5>
                    <div id="skills-container"></div>
                    <button id="add-skill-btn" type="button" class="btn btn-outline-primary btn-sm mt-2">+ Add
                        Skill</button>
                    <hr>
                    <div class="row">
                        <div class="col col-6">
                            <label for="minDamageAdd">Min Damage Add</label>
                            <input type="number" id="minDamageAdd" name="minDamageAdd" class="form-control"
                                placeholder="5" step="0.01" />
                        </div>
                        <div class="col col-6">
                            <label for="maxDamageAdd">Max Damage Add</label>
                            <input type="number" id="maxDamageAdd" name="maxDamageAdd" class="form-control"
                                placeholder="20" step="0.01" />
                        </div>
                    </div>
                    <br>
                    <div class="row">
                        <div class="col col-6">
                            <label for="minSpeedAdd">Min Speed Add</label>
                            <input type="number" id="minSpeedAdd" name="minSpeedAdd" class="form-control"
                                placeholder="0.5" step="0.01" />
                        </div>
                        <div class="col col-6">
                            <label for="maxSpeedAdd">Max Speed Add</label>
                            <input type="number" id="maxSpeedAdd" name="maxSpeedAdd" class="form-control"
                                placeholder="1.5" step="0.01" />
                        </div>
                    </div>
                    <br>
                    <label for="chargeTimeAdd">Charge Time Add</label>
                    <input type="number" id="chargeTimeAdd" name="chargeTimeAdd" class="form-control" placeholder="1.2"
                        step="0.01" />
                    <br>
                    <label for="forcePowerAdd">Force Power Add</label>
                    <input type="number" id="forcePowerAdd" name="forcePowerAdd" class="form-control" placeholder="1"
                        step="0.01" />
                    <br>
                    <label for="lifeTimeAdd">Life Time Add</label>
                    <input type="number" id="lifeTimeAdd" name="lifeTimeAdd" class="form-control" placeholder="3"
                        step="0.01" />
                </div>
            </div>

            <button type="submit" class="btn btn-success">Create</button>
        </form>
    </div>

    <script>
        const form = document.getElementById("item-form");
        const selector = document.querySelector("#itemSelector");
        const setIconInput = document.querySelector("#setIconInput");
        const itemIcon = document.querySelector("#itemIcon");
        const canStack = document.querySelector("#canStack");
        const canBuy = document.querySelector("#canBuy");
        const canSell = document.querySelector("#canSell");
        const startLevel = document.querySelector("#startLevel");
        const endLevel = document.querySelector("#endLevel");
        const skillOptions = '<%= skillTypes %>'.split(",");
        const addSkillButton = document.getElementById("add-skill-btn");

        addSkillButton.onclick = addSkill;

        startLevel.addEventListener('change', function () {
            if (!startLevel.value) {
                startLevel.value = 1;
            }
            endLevel.setAttribute("min", startLevel.value);
            endLevel.value = Math.max(endLevel.value, startLevel.value);
        });

        endLevel.addEventListener('change', function () {
            if (!endLevel.value) {
                endLevel.value = 1;
            }
            startLevel.setAttribute("max", endLevel.value);
            startLevel.value = Math.min(endLevel.value, startLevel.value);
        });

        setIconInput.addEventListener('change', function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    itemIcon.style.display = null;
                    itemIcon.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        selector.addEventListener("change", loadItemDiv);

        loadItemDiv();

        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = new FormData(form);
            const name = formData.get("itemName");
            const startLevel = Number.parseFloat(formData.get("startLevel"));
            const endLevel = Number.parseFloat(formData.get("endLevel"));

            const confirmed = window.confirm(`Are you sure you want to create item '${startLevel === 0 ? name : `${name} +${startLevel}`}' to '${endLevel === 0 ? name : `${name} +${endLevel}`}'?`);

            if (!confirmed) return;

            const base64String = itemIcon.src;

            const responseUploadIcon = await fetch("./upload-image", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ base64: base64String })
            });

            if (responseUploadIcon.ok) {
                const responseUploadIconJson = await responseUploadIcon.json();
                const iconPath = responseUploadIconJson["path"];

                const description = formData.get("itemDescription");
                const rank = formData.get("itemRank");
                const buyPrice = formData.get("buyPrice");
                const sellPrice = formData.get("sellPrice");
                const health = Number.parseFloat(formData.get("health"));
                const armor = Number.parseFloat(formData.get("armor"));
                const healthAdd = Number.parseFloat(formData.get("healthAdd"));
                const armorAdd = Number.parseFloat(formData.get("armorAdd"));
                const voidPrefabName = formData.get("voidPrefabName");
                const minDamage = Number.parseFloat(formData.get("minDamage"));
                const maxDamage = Number.parseFloat(formData.get("maxDamage"));
                const minSpeed = Number.parseFloat(formData.get("minSpeed"));
                const maxSpeed = Number.parseFloat(formData.get("maxSpeed"));
                const chargeTime = Number.parseFloat(formData.get("chargeTime"));
                const forcePower = Number.parseFloat(formData.get("forcePower"));
                const lifeTime = Number.parseFloat(formData.get("lifeTime"));
                const minDamageAdd = Number.parseFloat(formData.get("minDamageAdd"));
                const maxDamageAdd = Number.parseFloat(formData.get("maxDamageAdd"));
                const minSpeedAdd = Number.parseFloat(formData.get("minSpeedAdd"));
                const maxSpeedAdd = Number.parseFloat(formData.get("maxSpeedAdd"));
                const chargeTimeAdd = Number.parseFloat(formData.get("chargeTimeAdd"));
                const forcePowerAdd = Number.parseFloat(formData.get("forcePowerAdd"));
                const lifeTimeAdd = Number.parseFloat(formData.get("lifeTimeAdd"));

                const skillElements = document.querySelectorAll("#skills-container .input-group");
                const skills = [];

                skillElements.forEach(group => {
                    const skillName = group.querySelector("select").value;
                    const level = parseInt(group.querySelector("input[name='skillLevel']").value) || 1;
                    skills.push({ skillName, level });
                });

                const results = {
                    items: [],
                    fuses: []
                };
                const itemIds = [];
                let oldItemJson = null;

                for (let i = 0; i < endLevel - startLevel + 1; i++) {
                    const level = startLevel + i;

                    const createItemPayload = {
                        type: selector.value,
                        iconPath,
                        name: level === 0 ? name : `${name} +${level}`,
                        description,
                        rank,
                        canStack: canStack.checked,
                        canBuy: level === 0 && canBuy.checked,
                        buyPrice,
                        canSell: level === 0 && canSell.checked,
                        sellPrice,
                        level,
                        health: health + (healthAdd * i),
                        armor: armor + (armorAdd * i),
                        voidPrefabName,
                        minDamage: minDamage + (minDamageAdd * i),
                        maxDamage: maxDamage + (maxDamageAdd * i),
                        minSpeed: minSpeed + (minSpeedAdd * i),
                        maxSpeed: maxSpeed + (maxSpeedAdd * i),
                        chargeTime: chargeTime + (chargeTimeAdd * i),
                        forcePower: forcePower + (forcePowerAdd * i),
                        lifeTime: lifeTime + (lifeTimeAdd * i),
                        skills: skills
                    };

                    const responseCreateItem = await fetch("./item/create", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(createItemPayload)
                    });

                    const resultCreateItem = await responseCreateItem.json();

                    if (responseCreateItem.ok) {
                        const itemJson = resultCreateItem["item"];

                        results.items.push({
                            id: itemJson.id,
                            name: itemJson.name,
                        });

                        if (oldItemJson) {
                            for (const itemId of itemIds) {
                                const createFusePayload = {
                                    item1: oldItemJson.id,
                                    item2: itemId,
                                    results: [
                                        {
                                            itemId: itemJson.id,
                                            rate: 100
                                        }
                                    ]
                                };

                                const responseCreateFuse = await fetch("./fuse/create", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify(createFusePayload)
                                });

                                if (responseCreateFuse.ok) {
                                    const resultCreateFuse = await responseCreateFuse.json();
                                    results.fuses.push(resultCreateFuse["fuse"]);
                                }
                            }
                        }

                        itemIds.push(itemJson.id);

                        oldItemJson = itemJson;
                    } else {
                        alert(JSON.stringify(resultCreateItem, null, 2));
                        return;
                    }
                }

                alert(JSON.stringify(results, null, 2));
            }
        });

        function addSkill(skillName = "", level = 1) {
            const container = document.getElementById("skills-container");

            // ดึง skill ที่เลือกไปแล้ว
            const selectedSkills = Array.from(container.querySelectorAll("select[name='skillName']")).map(select => select.value);

            // ถ้า skillName ถูกใช้ไปแล้ว ไม่ให้เพิ่ม
            if (skillName && selectedSkills.includes(skillName)) {
                alert(`Skill "${skillName}" already selected.`);
                return;
            }

            const wrapper = document.createElement("div");
            wrapper.classList.add("input-group", "mb-2");

            const select = document.createElement("select");
            select.classList.add("form-select");
            select.name = "skillName";

            skillOptions.forEach(option => {
                if (!selectedSkills.includes(option) || option === skillName) {
                    const opt = document.createElement("option");
                    opt.value = option;
                    opt.textContent = option;
                    if (option === skillName) opt.selected = true;
                    select.appendChild(opt);
                }
            });

            select.addEventListener("change", () => {
                updateAllSkillDropdowns();
            });

            const input = document.createElement("input");
            input.type = "number";
            input.name = "skillLevel";
            input.classList.add("form-control");
            input.placeholder = "Level";
            input.value = level;
            input.step = 1;
            input.min = 1;

            const removeBtn = document.createElement("button");
            removeBtn.type = "button";
            removeBtn.textContent = "🗑";
            removeBtn.classList.add("btn", "btn-outline-danger");
            removeBtn.onclick = () => {
                container.removeChild(wrapper);
                updateAllSkillDropdowns();
            };

            wrapper.appendChild(select);
            wrapper.appendChild(input);
            wrapper.appendChild(removeBtn);
            container.appendChild(wrapper);

            updateAllSkillDropdowns();
        }

        function updateAllSkillDropdowns() {
            const selects = document.querySelectorAll("select[name='skillName']");
            const selected = Array.from(selects).map(s => s.value);

            selects.forEach(currentSelect => {
                const currentValue = currentSelect.value;
                currentSelect.innerHTML = "";

                skillOptions.forEach(option => {
                    // แสดงเฉพาะ skill ที่ยังไม่ถูกเลือก หรือเป็นค่าปัจจุบันของ dropdown นั้น
                    if (!selected.includes(option) || option === currentValue) {
                        const opt = document.createElement("option");
                        opt.value = option;
                        opt.textContent = option;
                        if (option === currentValue) opt.selected = true;
                        currentSelect.appendChild(opt);
                    }
                });
            });
        }

        function loadItemDiv() {
            document.querySelectorAll(".item").forEach(itemDiv => {
                itemDiv.classList.add("d-none");
                // itemDiv.querySelectorAll("input").forEach(input => input.removeAttribute("required"));
            });

            const selectedName = selector.value;
            if (selectedName) {
                const activeItem = document.querySelector(`#${selectedName}`);

                if (activeItem) {
                    activeItem.classList.remove("d-none");
                    // activeItem.querySelectorAll("input").forEach(input => input.setAttribute("required", true));
                }

                if (selectedName === "NormalItem") {
                    canStack.checked = true;
                    canStack.removeAttribute("disabled");
                }
                else {
                    canStack.checked = false;
                    canStack.setAttribute("disabled", true);
                }
            }
        }
    </script>

    <script src="../bs-5/js/bootstrap.min.js"></script>
</body>

</html>