<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Create World</title>

    <link href="../bs-5/css/bootstrap.min.css" rel="stylesheet">

    <style>
        .whitelist-entry {
            margin-bottom: 8px;
        }

        .stage-entry {
            padding-block: 10px;
        }

        .description-entry {
            padding-block: 15px;
            display: block;
        }

        .value-entry {
            margin-left: 20px;
            margin-block: 5px;
            display: block;
        }

        img.preview {
            max-width: 300px;
        }

        #stage-container {
            margin-left: 25px;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="mb-4">Create World</h1>

        <form id="world-form">
            <label>
                World Name:
                <input type="text" name="worldName" required>
            </label>

            <br><br>

            <h3>Whitelists</h3>
            <div id="whitelist-container"></div>
            <button type="button" class="btn btn-primary" onclick="addWhitelist()">Add Whitelist</button>

            <hr class="border border-black border-2">

            <h3>Stages</h3>

            <div id="stage-container"></div>
            <button type="button" class="btn btn-primary" onclick="addStage()">Add Stage</button>

            <hr class="border border-black border-2">

            <br>

            <button type="submit" class="btn btn-success">Create</button>
        </form>
    </div>

    <script>
        const form = document.getElementById("world-form");

        function addWhitelist() {
            const container = document.getElementById("whitelist-container");

            const whitelistEntry = document.createElement("div");
            whitelistEntry.className = "whitelist-entry";

            const whitelistInput = document.createElement("input");
            whitelistInput.name = "whitelist";
            whitelistInput.type = "number";
            whitelistInput.placeholder = "Children discord id";

            const removeWhitelistButton = document.createElement("button");
            removeWhitelistButton.classList.add("btn");
            removeWhitelistButton.classList.add("btn-danger");
            removeWhitelistButton.innerText = "Remove";
            removeWhitelistButton.onclick = () => whitelistEntry.remove();

            whitelistEntry.appendChild(whitelistInput);
            whitelistEntry.appendChild(removeWhitelistButton);

            container.appendChild(whitelistEntry);
        }

        function addStage() {
            const container = document.getElementById("stage-container");

            const stageEntry = document.createElement("div");
            stageEntry.className = "stage-entry";

            const stageNameLabel = document.createElement("label");
            stageNameLabel.innerText = "Stage Name:";

            const stageName = document.createElement("input");
            stageName.type = "text";
            stageName.name = "stageName";
            stageName.value = container.querySelectorAll(".stage-entry").length + 1;
            stageName.setAttribute("required", true);

            stageNameLabel.appendChild(stageName);

            const descriptionEntry = document.createElement("div");
            descriptionEntry.className = "description-entry";

            const createTextButton = document.createElement("button");
            createTextButton.classList.add("btn");
            createTextButton.classList.add("btn-secondary");
            createTextButton.type = "button";
            createTextButton.innerText = "Create Text";
            createTextButton.onclick = () => createTextValue(descriptionEntry);

            const imageInput = document.createElement("input");
            imageInput.value = "";
            imageInput.type = "file";
            imageInput.accept = "image/*";

            imageInput.addEventListener('change', function () {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        createImageValue(descriptionEntry, e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });

            const exampleOutputLabel = document.createElement("label");
            exampleOutputLabel.innerText = "Example Output:";

            const exampleOutput = document.createElement("input");
            exampleOutput.type = "text";
            exampleOutput.name = "exampleOutput";

            exampleOutputLabel.appendChild(exampleOutput);

            const npcEntry = document.createElement("div");
            npcEntry.className = "npc-entry";

            const createNpcButton = document.createElement("button");
            createNpcButton.classList.add("btn");
            createNpcButton.classList.add("btn-secondary");
            createNpcButton.type = "button";
            createNpcButton.innerText = "Create NPC";
            createNpcButton.onclick = () => createNpc(createNpcButton, npcEntry);

            const haveApproveLabel = document.createElement("label");
            haveApproveLabel.innerText = "Have Approve:";

            const haveApprove = document.createElement("input");
            haveApprove.type = "checkbox";
            haveApprove.name = "haveApprove";

            haveApproveLabel.appendChild(haveApprove);

            const rewardIdLabel = document.createElement("label");
            rewardIdLabel.innerText = "Reward Id:";

            const rewardId = document.createElement("input");
            rewardId.type = "number";
            rewardId.name = "rewardId";

            rewardIdLabel.appendChild(rewardId);

            const removeStageButton = document.createElement("button");
            removeStageButton.classList.add("btn");
            removeStageButton.classList.add("btn-danger");
            removeStageButton.innerText = "Remove Stage";
            removeStageButton.onclick = () => stageEntry.remove();

            stageEntry.append(stageNameLabel);
            stageEntry.append(document.createElement("br"));
            stageEntry.append(descriptionEntry);
            stageEntry.append(createTextButton);
            stageEntry.append(imageInput);
            stageEntry.append(document.createElement("br"));
            stageEntry.append(document.createElement("br"));
            stageEntry.append(exampleOutputLabel);
            stageEntry.append(document.createElement("br"));
            stageEntry.append(document.createElement("hr"));
            stageEntry.append(document.createElement("br"));
            stageEntry.append(npcEntry);
            stageEntry.append(createNpcButton);
            stageEntry.append(document.createElement("br"));
            stageEntry.append(document.createElement("hr"));
            stageEntry.append(document.createElement("br"));
            stageEntry.append(haveApproveLabel);
            stageEntry.append(document.createElement("br"));
            stageEntry.append(rewardIdLabel);
            stageEntry.append(document.createElement("br"));
            stageEntry.append(document.createElement("br"));
            stageEntry.append(removeStageButton);
            stageEntry.append(document.createElement("hr"));
            container.appendChild(stageEntry);
        }

        function createTextValue(parentEntry) {
            const valueEntry = document.createElement("div");
            valueEntry.classList.add("value-entry");
            valueEntry.classList.add("value-text");

            const textInput = document.createElement("input");
            textInput.name = "value";
            textInput.type = "text";
            textInput.placeholder = "Text";
            textInput.setAttribute("required", true);

            const removeBtn = document.createElement("button");
            removeBtn.classList.add("btn");
            removeBtn.classList.add("btn-danger");
            removeBtn.type = "button";
            removeBtn.innerText = "Remove Text";
            removeBtn.onclick = () => valueEntry.remove();

            valueEntry.appendChild(textInput);
            valueEntry.appendChild(removeBtn);

            parentEntry.appendChild(valueEntry);
        }

        function createImageValue(parentEntry, imageSrc) {
            const valueEntry = document.createElement("div");
            valueEntry.classList.add("value-entry");
            valueEntry.classList.add("value-image");

            // สร้าง preview ใหม่
            const imagePreview = document.createElement("img");
            imagePreview.classList.add("preview");
            imagePreview.name = "value";
            imagePreview.src = imageSrc;

            // ปุ่มลบ
            const removeBtn = document.createElement("button");
            removeBtn.classList.add("btn");
            removeBtn.classList.add("btn-danger");
            removeBtn.type = "button";
            removeBtn.innerText = "Remove Image";
            removeBtn.onclick = () => valueEntry.remove();

            valueEntry.appendChild(imagePreview);
            valueEntry.appendChild(removeBtn);

            parentEntry.appendChild(valueEntry);
        }

        function createNpc(createNpcButton, npcEntry) {
            const npcNameLabel = document.createElement("label");
            npcNameLabel.innerText = "NPC Name:";

            const npcName = document.createElement("input");
            npcName.type = "text";
            npcName.name = "npcName";
            npcName.setAttribute("required", true);

            npcNameLabel.appendChild(npcName);

            const npcDialogEntry = document.createElement("div");
            npcDialogEntry.className = "npc-dialog-entry";

            const createTextButton = document.createElement("button");
            createTextButton.classList.add("btn");
            createTextButton.classList.add("btn-secondary");
            createTextButton.type = "button";
            createTextButton.innerText = "Create Text";
            createTextButton.onclick = () => createTextValue(npcDialogEntry);

            const imageInput = document.createElement("input");
            imageInput.value = "";
            imageInput.type = "file";
            imageInput.accept = "image/*";

            imageInput.addEventListener('change', function () {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        createImageValue(npcDialogEntry, e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });

            const removeNpcButton = document.createElement("button");
            removeNpcButton.classList.add("btn");
            removeNpcButton.classList.add("btn-danger");
            removeNpcButton.type = "button";
            removeNpcButton.innerText = "Remove NPC";
            removeNpcButton.onclick = () => {
                createNpcButton.style.display = null;
                npcEntry.innerHTML = null;
            }

            npcEntry.appendChild(npcNameLabel);
            npcEntry.append(document.createElement("br"));
            npcEntry.appendChild(npcDialogEntry);
            npcEntry.append(document.createElement("br"));
            npcEntry.appendChild(createTextButton);
            npcEntry.appendChild(imageInput);
            npcEntry.append(document.createElement("br"));
            npcEntry.append(document.createElement("br"));
            npcEntry.appendChild(removeNpcButton);

            createNpcButton.style.display = "none";
        }

        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = new FormData(form);
            const worldName = formData.get("worldName");

            // เก็บ whitelist จาก input หลายช่อง
            const whitelistInputs = form.querySelectorAll("input[name='whitelist']");
            const whitelists = Array.from(whitelistInputs)
                .map(input => input.value.trim())
                .filter(Boolean);

            const stageEntries = form.querySelectorAll(".stage-entry");

            const stageDatas = [];

            for (const stageEntry of stageEntries) {
                const stageName = stageEntry.querySelector("*[name='stageName']")?.value;
                const descriptionValueEntries = stageEntry.querySelector(".description-entry")?.querySelectorAll(".value-entry") ?? [];
                const npcEntry = stageEntry.querySelector(".npc-entry");
                const npcName = npcEntry?.querySelector("*[name='npcName']")?.value;
                const npcDialogEntries = npcEntry.querySelector(".npc-dialog-entry")?.querySelectorAll(".value-entry") ?? [];
                const exampleOutput = stageEntry.querySelector("*[name='exampleOutput']")?.value;
                const haveApprove = stageEntry.querySelector("*[name='haveApprove']")?.checked ?? false;
                const rewardId = stageEntry.querySelector("*[name='rewardId']")?.value;

                if (stageName) {
                    const stageData = new Map();

                    if (exampleOutput) stageData.set("exampleOutput", exampleOutput);
                    if (haveApprove) stageData.set("haveApprove", haveApprove);
                    if (rewardId) stageData.set("rewardId", rewardId);

                    const descriptionData = new Set();

                    for (const descriptionValueEntry of descriptionValueEntries) {
                        const valueElement = descriptionValueEntry.querySelector("*[name='value']");

                        if (!valueElement) continue;

                        if (descriptionValueEntry.classList.contains("value-image")) {
                            const base64String = valueElement.src;

                            const response = await fetch("./upload-image", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ base64: base64String })
                            });

                            const result = await response.json();

                            if (response.ok) {
                                // console.log("Image:", result.path);

                                descriptionData.add({
                                    valueType: "image",
                                    value: result.path
                                });
                            }
                        } else if (descriptionValueEntry.classList.contains("value-text")) {
                            const text = valueElement.value;

                            // console.log("Text:", text);

                            descriptionData.add({
                                valueType: "text",
                                value: text
                            });
                        }
                    }

                    // Convert Set to Array
                    const descriptionArray = Array.from(descriptionData);

                    if (npcEntry && npcName) {
                        const npcData = new Map();
                        const dialogData = new Set();

                        npcData.set("npcName", npcName);

                        for (const npcDialogEntry of npcDialogEntries) {
                            const valueElement = npcDialogEntry.querySelector("*[name='value']");

                            if (!valueElement) continue;

                            if (npcDialogEntry.classList.contains("value-image")) {
                                const base64String = valueElement.src;

                                const response = await fetch("./upload-image", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify({ base64: base64String })
                                });

                                const result = await response.json();

                                if (response.ok) {
                                    // console.log("Image:", result.path);

                                    dialogData.add({
                                        valueType: "image",
                                        value: result.path
                                    });
                                }
                            } else if (npcDialogEntry.classList.contains("value-text")) {
                                const text = valueElement.value;

                                // console.log("Text:", text);

                                dialogData.add({
                                    valueType: "text",
                                    value: text
                                });
                            }
                        }

                        // Convert dialogData Set to Array
                        const dialogArray = Array.from(dialogData);

                        npcData.set("dialog", dialogArray);

                        stageData.set("npc", Object.fromEntries(npcData));
                    }

                    if (descriptionArray.length > 0) stageData.set("description", descriptionArray);

                    if ([...stageData.keys()].length > 0) {
                        stageData.set("stageName", stageName);
                        stageData.set("stageType", "CodeStage");
                        // Convert Map to Object for JSON serialization
                        stageDatas.push(Object.fromEntries(stageData));
                    }
                }
            }

            const payload = {
                worldName,
                whitelists,
                stages: stageDatas
            };

            const response = await fetch("./world/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            alert(JSON.stringify(result, null, 2));
        });
    </script>

    <script src="../bs-5/js/bootstrap.min.js"></script>
</body>

</html>